create or replace function public.ingest_shopify_checkout(
  _shops_id int,
  _shop_domain text,
  _payload jsonb
) returns text
language plpgsql as $$
declare
  _id text := _payload->>'id';
begin
  insert into public."shopifyCheckouts" as c (
    "shopifyCheckoutId", "shops", "shopDomain",
    "email", "currency", "presentmentCurrency",
    "buyerAcceptsMarketing", "cartToken", "token",
    "abandonedCheckoutUrl", "orderId", "customerId",
    "customer", "shippingAddress", "billingAddress",
    "discountCodes", "discountApplications", "appliedDiscount",
    "giftCards", "lineItems", "taxLines", "shippingLines",
    "note", "noteAttributes", "tags",
    "sourceName", "locationId", "deviceId",
    "gateway", "financialStatus",
    "completedAt", "closedAt", "cancelledAt", "cancelReason",
    "confirmed", "test", "poNumber", "reference",
    "referringSite", "landingSite", "browserIp",
    "clientDetails", "paymentGatewayNames", "shippingRate",
    "subtotalPrice", "totalPrice", "totalTax", "totalDiscounts", "totalLineItemsPrice",
    "totalPriceSet", "subtotalPriceSet", "totalTaxSet", "totalDiscountsSet",
    "totalShippingPriceSet", "presentmentTotalPriceSet",
    "duties", "estimatedTaxes", "taxesIncluded", "dutiesIncluded", "shippingAddressSameAsBilling",
    "orderStatusUrl", "createdAt", "updatedAt", "payload"
  )
  values (
    _id, _shops_id, _shop_domain,
    _payload->>'email',
    _payload->>'currency',
    _payload->>'presentment_currency',
    (_payload->>'buyer_accepts_marketing')::boolean,
    _payload->>'cart_token',
    _payload->>'token',
    _payload->>'abandoned_checkout_url',
    nullif(_payload->>'order_id','')::bigint,
    nullif(_payload#>>'{customer,id}','')::bigint,
    coalesce(_payload->'customer','{}'),
    coalesce(_payload->'shipping_address','{}'),
    coalesce(_payload->'billing_address','{}'),
    coalesce(_payload->'discount_codes','[]'),
    coalesce(_payload->'discount_applications','[]'),
    coalesce(_payload->'applied_discount','{}'),
    coalesce(_payload->'gift_cards','[]'),
    coalesce(_payload->'line_items','[]'),
    coalesce(_payload->'tax_lines','[]'),
    coalesce(_payload->'shipping_lines','[]'),
    _payload->>'note',
    coalesce(_payload->'note_attributes','[]'),
    string_to_array(coalesce(_payload->>'tags',''),','),
    _payload->>'source_name',
    nullif(_payload->>'location_id','')::bigint,
    nullif(_payload->>'device_id','')::bigint,
    _payload->>'gateway',
    _payload->>'financial_status',
    safe_ts(_payload->>'completed_at'),
    safe_ts(_payload->>'closed_at'),
    safe_ts(_payload->>'cancelled_at'),
    _payload->>'cancel_reason',
    (_payload->>'confirmed')::boolean,
    (_payload->>'test')::boolean,
    _payload->>'po_number',
    _payload->>'reference',
    _payload->>'referring_site',
    _payload->>'landing_site',
    _payload->>'browser_ip',
    coalesce(_payload->'client_details','{}'),
    coalesce(_payload->'payment_gateway_names','[]'),
    coalesce(_payload->'shipping_rate','{}'),
    safe_num(_payload->>'subtotal_price'),
    safe_num(_payload->>'total_price'),
    safe_num(_payload->>'total_tax'),
    safe_num(_payload->>'total_discounts'),
    safe_num(_payload->>'total_line_items_price'),
    coalesce(_payload->'total_price_set','{}'),
    coalesce(_payload->'subtotal_price_set','{}'),
    coalesce(_payload->'total_tax_set','{}'),
    coalesce(_payload->'total_discounts_set','{}'),
    coalesce(_payload->'total_shipping_price_set','{}'),
    coalesce(_payload->'presentment_total_price_set','{}'),
    coalesce(_payload->'duties','[]'),
    (_payload->>'estimated_taxes')::boolean,
    (_payload->>'taxes_included')::boolean,
    (_payload->>'duties_included')::boolean,
    (_payload->>'shipping_address_same_as_billing')::boolean,
    _payload->>'order_status_url',
    safe_ts(_payload->>'created_at'),
    safe_ts(_payload->>'updated_at'),
    _payload
  )
  on conflict ("shopifyCheckoutId") do update
    set payload = excluded.payload,
        updatedAt = excluded.updatedAt;
  return _id;
end $$;
